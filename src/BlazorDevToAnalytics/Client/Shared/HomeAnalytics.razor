@inject ILocalStorageService localStorage
@inject HttpClient Http

@if (statsArticles == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-sm-3">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Total Views</h5>
                    <p class="card-text">@statsArticles.TotalViews</p>
                </div>
            </div>
        </div>
        <div class="col-sm-3">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Total Articles</h5>
                    <p class="card-text">@statsArticles.TotalArticles</p>
                </div>
            </div>
        </div>
        <div class="col-sm-3">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Total Comments</h5>
                    <p class="card-text">@statsArticles.TotalComments</p>
                </div>
            </div>
        </div>
        <div class="col-sm-3">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Total Reactions</h5>
                    <p class="card-text">@statsArticles.TotalReactions</p>
                </div>
            </div>
        </div>
    </div>
}

@if (percentagesStats.AllViewsVsTopArticle == 0)
{
    <p><em>Loading...</em></p>
}
else
{
    <br />

    <div class="row">
        <div class="col-sm-4">
            <div class="card">
                <div class="card-body">
                    <h7 class="card-title">Percentage of all views of your most viewed article</h7>
                    <p class="card-text">@percentagesStats.AllViewsVsTopArticle%</p>
                </div>
            </div>
        </div>
        <div class="col-sm-4">
            <div class="card">
                <div class="card-body">
                    <h7 class="card-title">Percentage of all reactions of your article with most reactions</h7>
                    <p class="card-text">@percentagesStats.AllReactionsVsTopArticle%</p>
                </div>
            </div>
        </div>
        <div class="col-sm-4">
            <div class="card">
                <div class="card-body">
                    <h7 class="card-title">Percentage of all comments of your article with most comments</h7>
                    <p class="card-text">@percentagesStats.AllCommentsVsTopArticle%</p>
                </div>
            </div>
        </div>
    </div>
}

@if (userarticles == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <hr />

    <ChartJsBarChart @ref="_barChart"
                     Config="@_barChartConfig"
                     Width="600"
                     Height="300" />

    <hr />

    <table class="table">
        <thead>
            <tr>
                <th>Title</th>
                <th>View Counts</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var article in userarticles)
            {
                <tr>
                    <td>@article.Title</td>
                    <td>@article.PageViewsCount</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<UserArticle> userarticles;
    private StatsArticles statsArticles;
    private PercentagesStats percentagesStats = new PercentagesStats();

    private BarConfig _barChartConfig;
    private ChartJsBarChart _barChart;
    private BarDataset<DoubleWrapper> _barDataSet;

    protected override async Task OnInitializedAsync()
    {
        var apikey = await localStorage.GetItemAsync<string>("api-key");

        userarticles = await Http.GetJsonAsync<List<UserArticle>>($"/api/DevToAnalytics/UserArticlesOrderByViewCounts?key={apikey}");
        statsArticles = await Http.GetJsonAsync<StatsArticles>($"/api/DevToAnalytics/StatsArticles?key={apikey}");

        CalculatePercentagesStats();

        CreateChartTopViews();
    }

    private void CalculatePercentagesStats()
    {
        percentagesStats.AllViewsVsTopArticle = Convert.ToInt32((userarticles[0].PageViewsCount / statsArticles.TotalViews) * 100);

        percentagesStats.AllReactionsVsTopArticle = Convert.ToInt32((userarticles.OrderByDescending(c => c.PositiveReactionsCount).FirstOrDefault().PositiveReactionsCount / statsArticles.TotalReactions) * 100);

        percentagesStats.AllCommentsVsTopArticle = Convert.ToInt32((userarticles.OrderByDescending(c => c.CommentsCount).FirstOrDefault().CommentsCount / statsArticles.TotalComments) * 100);


    }

    private void CreateChartTopViews()
    {
        _barChartConfig = new BarConfig
        {
            Options = new BarOptions
            {
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Posts by Views"
                },
                Scales = new BarScales
                {
                    XAxes = new List<CartesianAxis> {
                        new BarCategoryAxis {
                            BarPercentage = 1
                        }
                    },
                    YAxes = new List<CartesianAxis> {
                        new BarLinearCartesianAxis {
                            Ticks = new LinearCartesianTicks {
                                BeginAtZero = true
                            }
                        }
                    }
                }
            }
        };

        _barChartConfig.Data.Labels.AddRange(userarticles.Select(p => p.Title).ToList().Take(5));

        _barDataSet = new BarDataset<DoubleWrapper>
        {
            BackgroundColor = "#0094FF",
            BorderWidth = 0,
            HoverBackgroundColor = ColorUtil.RandomColorString(),
            HoverBorderColor = ColorUtil.RandomColorString(),
            HoverBorderWidth = 1,
            BorderColor = "#ffffff"

        };

        _barDataSet.AddRange(userarticles.Select(p => p.PageViewsCount).Take(5).Wrap());
        _barChartConfig.Data.Datasets.Add(_barDataSet);
    }
}
